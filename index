import time
import traceback

import boto3
import json
import logging
import os

logger = logging.getLogger()
logger.setLevel(logging.INFO)

fn_name = "Update_Parameter_Store"


class RenderFormsException(Exception):
    pass


client = boto3.client('sts')


def lambda_handler(event, context):
    """
            Update the respective Environment variables in to SSM from Dev Account
            :param event,
            :param context:
            :return:
        """
    start_time = time.perf_counter()
    logger.info(f'lambda : {fn_name}, lambda_handler() start()')
    metadata = event[0]
    value = event[1]
    param_name = metadata["parametername"]
    env = metadata["env"]
    region_name = metadata["region_name"]
    logger.info(f'lambda : {fn_name}, lambda_handler() update the parameter {param_name} in {env} environment '
                f'in {region_name} region.')
    try:
        if env.upper() in ["TEST", "DEV"]:
            ssm = boto3.client("ssm")
        elif env.upper() == "PROD":
            role_arn = os.environ["cross_role_arn"]
            response = client.assume_role(RoleArn=role_arn, RoleSessionName='ssmparameterstore', DurationSeconds=900)
            ssm = boto3.client('ssm', region_name=region_name,
                               aws_access_key_id=response['Credentials']['AccessKeyId'],
                               aws_secret_access_key=response['Credentials']['SecretAccessKey'],
                               aws_session_token=response['Credentials']['SessionToken'])
        if env:
            param_name = param_name.replace("env", env.lower())
            response = ssm.put_parameter(
                Name=param_name,
                Value=json.dumps(value),
                Type='String',
                Overwrite=True,
                Tier='Standard',
            )
        end_time = time.perf_counter()
        logger.info(f'lambda : {fn_name}, lambda_handler() end in time {end_time-start_time} seconds.')
        return {
            'statusCode': 200,
            'body': json.dumps('Environment Variables updated to SSM!')
        }
    except Exception as ex:
        exception_traceback = traceback.format_exc()
        end_time = time.perf_counter()
        err_message = {
            "error": True,
            "Error Message": ex,
            "Error Description": exception_traceback
        }
        logger.exception(f'lambda : EnvironmentVariableStoreSSM, lambda_handler() in {end_time-start_time} seconds '
                         f'with {exception_traceback} ')
        raise RenderFormsException(err_message)
